;; Auto-generated. Do not edit!


(when (boundp 'poi_scan::PoiScanActionGoal)
  (if (not (find-package "POI_SCAN"))
    (make-package "POI_SCAN"))
  (shadow 'PoiScanActionGoal (find-package "POI_SCAN")))
(unless (find-package "POI_SCAN::POISCANACTIONGOAL")
  (make-package "POI_SCAN::POISCANACTIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude PoiScanActionGoal.msg.html
(if (not (find-package "ACTIONLIB_MSGS"))
  (ros::roseus-add-msgs "actionlib_msgs"))
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass poi_scan::PoiScanActionGoal
  :super ros::object
  :slots (_header _goal_id _goal ))

(defmethod poi_scan::PoiScanActionGoal
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:goal_id __goal_id) (instance actionlib_msgs::GoalID :init))
    ((:goal __goal) (instance poi_scan::PoiScanGoal :init))
    )
   (send-super :init)
   (setq _header __header)
   (setq _goal_id __goal_id)
   (setq _goal __goal)
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:goal_id
   (&rest __goal_id)
   (if (keywordp (car __goal_id))
       (send* _goal_id __goal_id)
     (progn
       (if __goal_id (setq _goal_id (car __goal_id)))
       _goal_id)))
  (:goal
   (&rest __goal)
   (if (keywordp (car __goal))
       (send* _goal __goal)
     (progn
       (if __goal (setq _goal (car __goal)))
       _goal)))
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; actionlib_msgs/GoalID _goal_id
    (send _goal_id :serialization-length)
    ;; poi_scan/PoiScanGoal _goal
    (send _goal :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; actionlib_msgs/GoalID _goal_id
       (send _goal_id :serialize s)
     ;; poi_scan/PoiScanGoal _goal
       (send _goal :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; actionlib_msgs/GoalID _goal_id
     (send _goal_id :deserialize buf ptr-) (incf ptr- (send _goal_id :serialization-length))
   ;; poi_scan/PoiScanGoal _goal
     (send _goal :deserialize buf ptr-) (incf ptr- (send _goal :serialization-length))
   ;;
   self)
  )

(setf (get poi_scan::PoiScanActionGoal :md5sum-) "b5a9dd3384253ed894bbfc71658c36ae")
(setf (get poi_scan::PoiScanActionGoal :datatype-) "poi_scan/PoiScanActionGoal")
(setf (get poi_scan::PoiScanActionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
PoiScanGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: poi_scan/PoiScanGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
string[] topics              # list of topics to record
string   bagfile_name_prefix # output bagfiles will begin with this prefix. Suffixes will be generated like \"_pos0.bag\"
uint32   num_stops           # number of times to stop during one 360degree rotation
float32  tune_rotation       # for example, value of 1.05 will overrotate 5% to compensate for natural underrrotation
float32  duration            # number of seconds to pause at each stop
bool     return_to_original  # set to true, if you want to return to original orientation when done
string   upload_url          # after recording rosbag, automatically upload here
bool     rm_after_upload     # if set to True, rosbag will be rm'd from turtlebot after successful upload
string   upload_token        # authorization token for upload server

")



(provide :poi_scan/PoiScanActionGoal "b5a9dd3384253ed894bbfc71658c36ae")


