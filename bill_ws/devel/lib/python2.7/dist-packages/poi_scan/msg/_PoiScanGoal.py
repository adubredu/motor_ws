# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from poi_scan/PoiScanGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PoiScanGoal(genpy.Message):
  _md5sum = "ab03635573f377c07ab715379686bef4"
  _type = "poi_scan/PoiScanGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
string[] topics              # list of topics to record
string   bagfile_name_prefix # output bagfiles will begin with this prefix. Suffixes will be generated like "_pos0.bag"
uint32   num_stops           # number of times to stop during one 360degree rotation
float32  tune_rotation       # for example, value of 1.05 will overrotate 5% to compensate for natural underrrotation
float32  duration            # number of seconds to pause at each stop
bool     return_to_original  # set to true, if you want to return to original orientation when done
string   upload_url          # after recording rosbag, automatically upload here
bool     rm_after_upload     # if set to True, rosbag will be rm'd from turtlebot after successful upload
string   upload_token        # authorization token for upload server
"""
  __slots__ = ['topics','bagfile_name_prefix','num_stops','tune_rotation','duration','return_to_original','upload_url','rm_after_upload','upload_token']
  _slot_types = ['string[]','string','uint32','float32','float32','bool','string','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       topics,bagfile_name_prefix,num_stops,tune_rotation,duration,return_to_original,upload_url,rm_after_upload,upload_token

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PoiScanGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.topics is None:
        self.topics = []
      if self.bagfile_name_prefix is None:
        self.bagfile_name_prefix = ''
      if self.num_stops is None:
        self.num_stops = 0
      if self.tune_rotation is None:
        self.tune_rotation = 0.
      if self.duration is None:
        self.duration = 0.
      if self.return_to_original is None:
        self.return_to_original = False
      if self.upload_url is None:
        self.upload_url = ''
      if self.rm_after_upload is None:
        self.rm_after_upload = False
      if self.upload_token is None:
        self.upload_token = ''
    else:
      self.topics = []
      self.bagfile_name_prefix = ''
      self.num_stops = 0
      self.tune_rotation = 0.
      self.duration = 0.
      self.return_to_original = False
      self.upload_url = ''
      self.rm_after_upload = False
      self.upload_token = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.bagfile_name_prefix
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I2fB().pack(_x.num_stops, _x.tune_rotation, _x.duration, _x.return_to_original))
      _x = self.upload_url
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.rm_after_upload))
      _x = self.upload_token
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.topics.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bagfile_name_prefix = str[start:end].decode('utf-8')
      else:
        self.bagfile_name_prefix = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.num_stops, _x.tune_rotation, _x.duration, _x.return_to_original,) = _get_struct_I2fB().unpack(str[start:end])
      self.return_to_original = bool(self.return_to_original)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.upload_url = str[start:end].decode('utf-8')
      else:
        self.upload_url = str[start:end]
      start = end
      end += 1
      (self.rm_after_upload,) = _get_struct_B().unpack(str[start:end])
      self.rm_after_upload = bool(self.rm_after_upload)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.upload_token = str[start:end].decode('utf-8')
      else:
        self.upload_token = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.bagfile_name_prefix
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I2fB().pack(_x.num_stops, _x.tune_rotation, _x.duration, _x.return_to_original))
      _x = self.upload_url
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.rm_after_upload))
      _x = self.upload_token
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.topics.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bagfile_name_prefix = str[start:end].decode('utf-8')
      else:
        self.bagfile_name_prefix = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.num_stops, _x.tune_rotation, _x.duration, _x.return_to_original,) = _get_struct_I2fB().unpack(str[start:end])
      self.return_to_original = bool(self.return_to_original)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.upload_url = str[start:end].decode('utf-8')
      else:
        self.upload_url = str[start:end]
      start = end
      end += 1
      (self.rm_after_upload,) = _get_struct_B().unpack(str[start:end])
      self.rm_after_upload = bool(self.rm_after_upload)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.upload_token = str[start:end].decode('utf-8')
      else:
        self.upload_token = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2fB = None
def _get_struct_I2fB():
    global _struct_I2fB
    if _struct_I2fB is None:
        _struct_I2fB = struct.Struct("<I2fB")
    return _struct_I2fB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
