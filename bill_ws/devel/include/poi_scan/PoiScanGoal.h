// Generated by gencpp from file poi_scan/PoiScanGoal.msg
// DO NOT EDIT!


#ifndef POI_SCAN_MESSAGE_POISCANGOAL_H
#define POI_SCAN_MESSAGE_POISCANGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace poi_scan
{
template <class ContainerAllocator>
struct PoiScanGoal_
{
  typedef PoiScanGoal_<ContainerAllocator> Type;

  PoiScanGoal_()
    : topics()
    , bagfile_name_prefix()
    , num_stops(0)
    , tune_rotation(0.0)
    , duration(0.0)
    , return_to_original(false)
    , upload_url()
    , rm_after_upload(false)
    , upload_token()  {
    }
  PoiScanGoal_(const ContainerAllocator& _alloc)
    : topics(_alloc)
    , bagfile_name_prefix(_alloc)
    , num_stops(0)
    , tune_rotation(0.0)
    , duration(0.0)
    , return_to_original(false)
    , upload_url(_alloc)
    , rm_after_upload(false)
    , upload_token(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _topics_type;
  _topics_type topics;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bagfile_name_prefix_type;
  _bagfile_name_prefix_type bagfile_name_prefix;

   typedef uint32_t _num_stops_type;
  _num_stops_type num_stops;

   typedef float _tune_rotation_type;
  _tune_rotation_type tune_rotation;

   typedef float _duration_type;
  _duration_type duration;

   typedef uint8_t _return_to_original_type;
  _return_to_original_type return_to_original;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _upload_url_type;
  _upload_url_type upload_url;

   typedef uint8_t _rm_after_upload_type;
  _rm_after_upload_type rm_after_upload;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _upload_token_type;
  _upload_token_type upload_token;





  typedef boost::shared_ptr< ::poi_scan::PoiScanGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poi_scan::PoiScanGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PoiScanGoal_

typedef ::poi_scan::PoiScanGoal_<std::allocator<void> > PoiScanGoal;

typedef boost::shared_ptr< ::poi_scan::PoiScanGoal > PoiScanGoalPtr;
typedef boost::shared_ptr< ::poi_scan::PoiScanGoal const> PoiScanGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poi_scan::PoiScanGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poi_scan::PoiScanGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace poi_scan

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'poi_scan': ['/home/ubuntu/bill_ros/bill_ws/devel/share/poi_scan/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::poi_scan::PoiScanGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poi_scan::PoiScanGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_scan::PoiScanGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poi_scan::PoiScanGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_scan::PoiScanGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poi_scan::PoiScanGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poi_scan::PoiScanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab03635573f377c07ab715379686bef4";
  }

  static const char* value(const ::poi_scan::PoiScanGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab03635573f377c0ULL;
  static const uint64_t static_value2 = 0x7ab715379686bef4ULL;
};

template<class ContainerAllocator>
struct DataType< ::poi_scan::PoiScanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poi_scan/PoiScanGoal";
  }

  static const char* value(const ::poi_scan::PoiScanGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poi_scan::PoiScanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
string[] topics              # list of topics to record\n\
string   bagfile_name_prefix # output bagfiles will begin with this prefix. Suffixes will be generated like \"_pos0.bag\"\n\
uint32   num_stops           # number of times to stop during one 360degree rotation\n\
float32  tune_rotation       # for example, value of 1.05 will overrotate 5% to compensate for natural underrrotation\n\
float32  duration            # number of seconds to pause at each stop\n\
bool     return_to_original  # set to true, if you want to return to original orientation when done\n\
string   upload_url          # after recording rosbag, automatically upload here\n\
bool     rm_after_upload     # if set to True, rosbag will be rm'd from turtlebot after successful upload\n\
string   upload_token        # authorization token for upload server\n\
";
  }

  static const char* value(const ::poi_scan::PoiScanGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poi_scan::PoiScanGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topics);
      stream.next(m.bagfile_name_prefix);
      stream.next(m.num_stops);
      stream.next(m.tune_rotation);
      stream.next(m.duration);
      stream.next(m.return_to_original);
      stream.next(m.upload_url);
      stream.next(m.rm_after_upload);
      stream.next(m.upload_token);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoiScanGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poi_scan::PoiScanGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poi_scan::PoiScanGoal_<ContainerAllocator>& v)
  {
    s << indent << "topics[]" << std::endl;
    for (size_t i = 0; i < v.topics.size(); ++i)
    {
      s << indent << "  topics[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topics[i]);
    }
    s << indent << "bagfile_name_prefix: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bagfile_name_prefix);
    s << indent << "num_stops: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_stops);
    s << indent << "tune_rotation: ";
    Printer<float>::stream(s, indent + "  ", v.tune_rotation);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "return_to_original: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_to_original);
    s << indent << "upload_url: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.upload_url);
    s << indent << "rm_after_upload: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rm_after_upload);
    s << indent << "upload_token: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.upload_token);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POI_SCAN_MESSAGE_POISCANGOAL_H
